# Start new network
# TODO change in dev
image:
  # -- The repository of the Quorum container image
  repository: base-image-dev.dock.merck.com/eleaflet/quorum/23.4.0
  # -- Image Pull Policy
  pullPolicy: Always
  # -- Image tag
  tag: "build-179"
  # <!-- # pragma: allowlist secret -->
  sha: "4132d363d9734d5f097e980e64fc05f01f628885b2967c5ae1accd116f1cbef4"  # pragma: allowlist secret

use_case:
  newNetwork:
    enabled: false
  
  joinNetwork:
    enabled: true

  updatePartnersInfo:
    enabled: true  
    
# Quorum configuration settings.
quorum:
  log:
    # -- Logging verbosity: 0=silent, 1=error, 2=warn, 3=info, 4=debug, 5=detail
    verbosity: 5

# Added for sidecar 
sidecar: 
# -- The repository of the sidecar  container image
  image: base-image-dev.dock.merck.com/eleaflet/network-tools:build-145 
  # -- Image Pull Policy
  pullPolicy: Always
  # -- Image tag
  # -- Directory path to where the persistent volume "logs" will be mounted to.
  logsMountPath: "/home/log"


# TODO:changed
service:
  p2p:
    enabled: true
    type: LoadBalancer
    port: 30303
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-attributes: load_balancing.cross_zone.enabled=true,deletion_protection.enabled=false
      service.beta.kubernetes.io/aws-load-balancer-subnets: subnet-076f9af1e398f1860, subnet-0a23cae4f7e05c2b6
      service.beta.kubernetes.io/aws-load-balancer-healthcheck-healthy-threshold: "2"
      service.beta.kubernetes.io/aws-load-balancer-healthcheck-unhealthy-threshold: "2"
      service.beta.kubernetes.io/aws-load-balancer-ip-address-type: ipv4
      service.beta.kubernetes.io/aws-load-balancer-name: quorum-nlb2
      service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip
      service.beta.kubernetes.io/aws-load-balancer-scheme: internal
      service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: preserve_client_ip.enabled=true,deregistration_delay.timeout_seconds=120,deregistration_delay.connection_termination.enabled=true,stickiness.enabled=true,stickiness.type=source_ip
      service.beta.kubernetes.io/aws-load-balancer-type: external
      



# -- Affinity for scheduling a pod.
# See [https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/)

# TODO: affinity for dev
# Notes for AWS: We want to schedule the pod in a certain availability zone, here eu-west-1a
# Must be the same zone as the NLB - see service annotation service.beta.kubernetes.io/aws-load-balancer-subnets
# Please note, that your nodes must be labeled accordingly!
# See [https://kubernetes.io/docs/reference/labels-annotations-taints/#topologykubernetesiozone](https://kubernetes.io/docs/reference/labels-annotations-taints/#topologykubernetesiozone)
affinity: {}
  # nodeAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #     nodeSelectorTerms:
  #       - matchExpressions:
  #           - key: topology.kubernetes.io/zone
  #             operator: In
  #             values:
  #               - eu-west-1a


# TODO
# -- An array of extra resources that will be deployed.
# This is useful e.g. for custom resources like SnapshotSchedule provided by [https://github.com/backube/snapscheduler](https://github.com/backube/snapscheduler).
extraResources:
# - |
#   apiVersion: snapscheduler.backube/v1
#   kind: SnapshotSchedule
#   metadata:
#     name: daily
#   spec:
#     retention:
#       maxCount: 30
#     schedule: 30 0 * * *
#
# - |
#   apiVersion: snapscheduler.backube/v1
#   kind: SnapshotSchedule
#   metadata:
#     name: hourly
#   spec:
#     retention:
#       maxCount: 24
#     schedule: 15 * * * *

# # TODO
# secretProviderClass:
#   # -- Whether to use CSI Secrets Store (e.g. Azure Key Vault) instead of "traditional" Kubernetes Secret.
#   enabled: false
#   # -- API Version of the SecretProviderClass
#   apiVersion: "secrets-store.csi.x-k8s.io/v1"
#   # -- Spec for the SecretProviderClass.
#   # Note: 1. The nodeKey must be mounted as objectAlias nodekey with path nodekey. 
#   #     2. In case of a new network: The accountkey must be mounted as objectAlias key with path key.
#   spec: 
#     provider: aws
#     parameters:
#       objects: |
#         - objectName: "arn:aws:secretsmanager:us-east-1:838158121660:secret:quorum-node-Jj73xW"
#           objectType: "secretsmanager"
#           jmesPath:
#             - path: nodekey
#               objectAlias: nodekey
#             # Key only required on new network
#             - path: key
#               objectAlias: key

# TODO
serviceAccount:
  # -- Specifies whether a service account should be created.
  # Must be true if secretProviderClass.enabled is true
  create: true
  # -- Annotations to add to the service account
  annotations:
    ## Sample for AWS if secretProviderClass.enabled is true
     eks.amazonaws.com/role-arn: "arn:aws:iam::838158121660:role/eleaflet-poc-secrets"

  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

  # -- Whether automounting API credentials for a service account is enabled or not.
  # See [https://docs.bridgecrew.io/docs/bc_k8s_35](https://docs.bridgecrew.io/docs/bc_k8s_35)
  automountServiceAccountToken: false
