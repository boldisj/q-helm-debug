# Default values for ethadapter.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- The number of replicas if autoscaling is false
replicaCount: 1

image:
  # -- The repository of the container image
  repository: "pharmaledger/ethadapter"
  # -- Image Pull Policy
  pullPolicy: Always
  # -- Overrides the image tag whose default is the chart appVersion.
  tag: "1.0.5"
  # -- sha256 digest of the image.
  # Do not add the prefix "@sha256:"
  # Default to image digest for version 1.0.2
  # <!-- # pragma: allowlist secret -->
  sha: "79b7c80233e610df3463974a6e9c9b3aa138c76242722b51c7396408255f600f" # pragma: allowlist secret

  # -- Whether automounting API credentials for a service account is enabled or not.
  # See [https://docs.bridgecrew.io/docs/bc_k8s_35](https://docs.bridgecrew.io/docs/bc_k8s_35)
  automountServiceAccountToken: false

serviceAccount:
  # -- Specifies whether a service account should be created.
  # Must be true if secretProviderClass.enabled is true
  create: true
  # -- Annotations to add to the service account
  annotations: #{}
    ## Sample for AWS if secretProviderClass.enabled is true
    eks.amazonaws.com/role-arn: "arn:aws:iam::838158121660:role/eleaflet-poc-secrets"

  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

  # -- Whether automounting API credentials for a service account is enabled or not.
  # See [https://docs.bridgecrew.io/docs/bc_k8s_35](https://docs.bridgecrew.io/docs/bc_k8s_35)
  automountServiceAccountToken: false




# Smartcontract
config:
  smartContractInfo: |-
    {
    "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"str\",\"type\":\"bool\"}],\"name\":\"BoolResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes1\",\"name\":\"str\",\"type\":\"bytes1\"}],\"name\":\"Bytes1Result\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"str\",\"type\":\"bytes32\"}],\"name\":\"Bytes32Result\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"statusCode\",\"type\":\"uint256\"}],\"name\":\"InvokeStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"str\",\"type\":\"bytes\"}],\"name\":\"Result\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string[2]\",\"name\":\"str\",\"type\":\"string[2]\"}],\"name\":\"StringArray2Result\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"str\",\"type\":\"string[]\"}],\"name\":\"StringArrayResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"str\",\"type\":\"uint256\"}],\"name\":\"UIntResult\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"anchorId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newAnchorValue\",\"type\":\"string\"}],\"name\":\"createAnchor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"anchorId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newAnchorValue\",\"type\":\"string\"}],\"name\":\"appendAnchor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"anchorId\",\"type\":\"string\"}],\"name\":\"getAllVersions\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"anchorId\",\"type\":\"string\"}],\"name\":\"getLastVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"anchors\",\"type\":\"string[]\"}],\"name\":\"createOrUpdateMultipleAnchors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSize\",\"type\":\"uint256\"}],\"name\":\"dumpAnchors\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"anchorId\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"anchorValues\",\"type\":\"string[]\"}],\"internalType\":\"struct Anchoring.Anchor[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNumberOfAnchors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"recover\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
    "address": "0x5e760bD44AD89aE28e81ffeb132B8dA18529AA3A"
    }

  # # -- The name of the existing ConfigMap to look for in case value 'smartContractInfo' is not defined.
  # smartContractInfoConfigMapName: "smartcontractinfo"
  # # -- The key of the SmartContractInfo in the existing ConfigMap in case 'smartContractInfo' is not explictly defined.
  # smartContractInfoConfigMapKey: "info"

  # Sandbox values - static one
# secrets:
#   orgAccountJson: |-
#     {"address": "0xb5ced4530d6ccbb31b2b542fd9b4558b52296784", "privateKey": "0x6b93a268f68239d321981125ecf24488920c6b3d900043d56fef66adb776abd5"}

secretProviderClass:
  # -- Whether to use CSI Secrets Store (e.g. Azure Key Vault) instead of "traditional" Kubernetes Secret.
  enabled: true
  # -- API Version of the SecretProviderClass
  apiVersion: "secrets-store.csi.x-k8s.io/v1"
  # -- Spec for the SecretProviderClass.
  # Note: The orgAccountJson must be mounted as objectAlias orgAccountJson
  spec: #{}
    ## Sample for AWS:
    provider: aws
    parameters:
      objects: |
        - objectName: "arn:aws:secretsmanager:us-east-1:838158121660:secret:orgAccountJson-sandbox-82KxaP"
          objectType: "secretsmanager"
          objectAlias: "orgAccountJson"


ingress:
  # -- Whether to create ingress or not.
  # Note: For ingress an Ingress Controller (e.g. AWS LB Controller, NGINX Ingress Controller, Traefik, ...) is required and service.type should be ClusterIP or NodePort depending on your configuration
  enabled: true
  # -- The className specifies the IngressClass object which is responsible for that class.
  # Note for Kubernetes >= 1.18 it is required to have an existing IngressClass object.
  # If IngressClass object does not exists, omit className and add the deprecated annotation 'kubernetes.io/ingress.class' instead.
  # For Kubernetes < 1.18 either use className or annotation 'kubernetes.io/ingress.class'.
  # See https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class
  className: "alb"
  # -- Ingress annotations.
  # For AWS LB Controller, see [https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.3/guide/ingress/annotations/](https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.3/guide/ingress/annotations/)
  # For Azure Application Gateway Ingress Controller, see [https://azure.github.io/application-gateway-kubernetes-ingress/annotations/](https://azure.github.io/application-gateway-kubernetes-ingress/annotations/)
  # For NGINX Ingress Controller, see [https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/](https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/)
  # For Traefik Ingress Controller, see [https://doc.traefik.io/traefik/routing/providers/kubernetes-ingress/#annotations](https://doc.traefik.io/traefik/routing/providers/kubernetes-ingress/#annotations)
  annotations:
    # The ARN of the existing SSL Certificate at AWS Certificate Manager
    # TODO-TF populate
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:838158121660:certificate/fa6798aa-87f8-4c8a-a5e0-43c235995c37
    # The name of the ALB group, can be used to configure a single ALB by multiple ingress objects
    alb.ingress.kubernetes.io/group.name: epi-group
    # Specifies the HTTP path when performing health check on targets.
    # old value alb.ingress.kubernetes.io/healthcheck-path: /check
    alb.ingress.kubernetes.io/healthcheck-path: /totalNumberOfAnchors/
    # Specifies the port used when performing health check on targets.
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    # Specifies the HTTP status code that should be expected when doing health checks against the specified health check path.
    alb.ingress.kubernetes.io/success-codes: "200"
    # Listen on HTTPS protocol at port 9443 at the ALB
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":9443}]'
    # Use internet facing
    alb.ingress.kubernetes.io/scheme: internet-facing
    # Use most current (as of Dec 2021) encryption ciphers
    alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS-1-2-Ext-2018-06
    # Use target type IP which is the case if the service type is ClusterIP
    alb.ingress.kubernetes.io/target-type: ip

    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  # -- A list of hostnames and path(s) to listen at the Ingress Controller
  hosts:
    - # -- The FQDN/hostname
      host: epipoc.msd-bcn.net
      paths:
        - # -- The Ingress Path. See [https://kubernetes.io/docs/concepts/services-networking/ingress/#examples](https://kubernetes.io/docs/concepts/services-networking/ingress/#examples)
          # Note: For Ingress Controllers like AWS LB Controller see their specific documentation.
          path: /*
          # -- The type of path. This value is required since Kubernetes 1.18.
          # For Ingress Controllers like AWS LB Controller or Traefik it is usually required to set its value to ImplementationSpecific
          # See [https://kubernetes.io/docs/concepts/services-networking/ingress/#path-types](https://kubernetes.io/docs/concepts/services-networking/ingress/#path-types)
          # and [https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/](https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/)
          pathType: ImplementationSpecific
