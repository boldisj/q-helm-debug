# Start new network
# TODO change in dev
image:
  # -- The repository of the Quorum container image
  repository: quorumengineering/quorum
  # -- Image Pull Policy
  pullPolicy: Always
  # -- Image tag
  tag: "23.4"
  # <!-- # pragma: allowlist secret -->
  sha: "bab0a966b3dedeb102b402ba86c1fc02050416f2ce6d153356342fcc9424456e"  # pragma: allowlist secret

use_case:
  newNetwork:
    # -- Enable the new-network use case. Can only be used in collaboration with updatePartnerInfo use case
    enabled: true
    # TODO from command line 
    #plugin_data_common: >-
    #   {
    #     "extradata": "newNetwork_extradata",
    #     "enode": "newNetwork_Enode",
    #     "nodeKeyPublic": "newNetwork_NodeKeyPublic",
    #     "genesisAccount": "newNetwork_genesisAccount"
    #   }
    # -- Sensitive data.
    # A JSON object containing two attributes:
    # 1. "genesisKeyStoreAccount" = a base64 encoded value.
    # 2. "nodeKey" = The secret private node key.
    # <!-- pragma: allowlist secret -->
    # TODO from command line 
    #plugin_data_secrets: >- # pragma: allowlist secret
    #   {
    #     "genesisKeyStoreAccount": "ewogICAgImFkZHJlc3MiOiAidGVzdGRhdGEiLAogICAgImNyeXB0byI6IHsKICAgICAgICAiY2lwaGVyIjogImFlcy0xMjgtY3RyIiwKICAgICAgICAiY2lwaGVydGV4dCI6ICJ0ZXN0ZGF0YSIsCiAgICAgICAgImNpcGhlcnBhcmFtcyI6IHsKICAgICAgICAgICAgIml2IjogInRlc3RkYXRhIgogICAgICAgIH0sCiAgICAgICAgIm1hYyI6ICJ0ZXN0ZGF0YSIsCiAgICAgICAgImtkZiI6ICJzY3J5cHQiLAogICAgICAgICJrZGZwYXJhbXMiOiB7CiAgICAgICAgICAgICJka2xlbiI6IDMyLAogICAgICAgICAgICAibiI6IDI2MjE0NCwKICAgICAgICAgICAgInIiOiA4LAogICAgICAgICAgICAicCI6IDEsCiAgICAgICAgICAgICJzYWx0IjogInRlc3RkYXRhIgogICAgICAgIH0KICAgIH0sCiAgICAiaWQiOiAidGVzdGRhdGEiLAogICAgInZlcnNpb24iOiAzCn0=",
    #     "nodeKey": "newNetwork_NodeKey"
    #   }
  
  updatePartnersInfo:
    enabled: false  


# TODO:changed
service:
  p2p:
    enabled: true
    type: LoadBalancer
    port: 30303
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-type: "external"
      service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
      service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: "instance"
      service.beta.kubernetes.io/aws-load-balancer-ip-address-type: "ipv4"
      service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: preserve_client_ip.enabled=true,deregistration_delay.timeout_seconds=120,deregistration_delay.connection_termination.enabled=true,stickiness.enabled=true,stickiness.type=source_ip
      service.beta.kubernetes.io/aws-load-balancer-healthcheck-healthy-threshold: "2"
      service.beta.kubernetes.io/aws-load-balancer-healthcheck-unhealthy-threshold: "2"
      #service.beta.kubernetes.io/aws-load-balancer-eip-allocations: "eipalloc-0c277b4b817957fcf"
      # public subnet in us-east-1b
      service.beta.kubernetes.io/aws-load-balancer-subnets: "subnet-03596a598bd8b0722"


# -- Affinity for scheduling a pod.
# See [https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/)

# TODO: affinity for dev
# Notes for AWS: We want to schedule the pod in a certain availability zone, here eu-west-1a
# Must be the same zone as the NLB - see service annotation service.beta.kubernetes.io/aws-load-balancer-subnets
# Please note, that your nodes must be labeled accordingly!
# See [https://kubernetes.io/docs/reference/labels-annotations-taints/#topologykubernetesiozone](https://kubernetes.io/docs/reference/labels-annotations-taints/#topologykubernetesiozone)
affinity: {}
  # nodeAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #     nodeSelectorTerms:
  #       - matchExpressions:
  #           - key: topology.kubernetes.io/zone
  #             operator: In
  #             values:
  #               - eu-west-1a


# TODO
# -- An array of extra resources that will be deployed.
# This is useful e.g. for custom resources like SnapshotSchedule provided by [https://github.com/backube/snapscheduler](https://github.com/backube/snapscheduler).
extraResources:
# - |
#   apiVersion: snapscheduler.backube/v1
#   kind: SnapshotSchedule
#   metadata:
#     name: daily
#   spec:
#     retention:
#       maxCount: 30
#     schedule: 30 0 * * *
#
# - |
#   apiVersion: snapscheduler.backube/v1
#   kind: SnapshotSchedule
#   metadata:
#     name: hourly
#   spec:
#     retention:
#       maxCount: 24
#     schedule: 15 * * * *

# TODO
secretProviderClass:
  # -- Whether to use CSI Secrets Store (e.g. Azure Key Vault) instead of "traditional" Kubernetes Secret.
  enabled: false
  # -- API Version of the SecretProviderClass
  apiVersion: "secrets-store.csi.x-k8s.io/v1"
  # -- Spec for the SecretProviderClass.
  # Note: 1. The nodeKey must be mounted as objectAlias nodekey with path nodekey. 
  #     2. In case of a new network: The accountkey must be mounted as objectAlias key with path key.
  spec: 
    provider: aws
    parameters:
      objects: |
        - objectName: "arn:aws:secretsmanager:us-east-1:838158121660:secret:quorum-node-Jj73xW"
          objectType: "secretsmanager"
          jmesPath:
            - path: nodekey
              objectAlias: nodekey
            # Key only required on new network
            - path: key
              objectAlias: key

# TODO
serviceAccount:
  # -- Specifies whether a service account should be created.
  # Must be true if secretProviderClass.enabled is true
  create: true
  # -- Annotations to add to the service account
  annotations:
    ## Sample for AWS if secretProviderClass.enabled is true
     eks.amazonaws.com/role-arn: "arn:aws:iam::838158121660:role/eleaflet-poc-secrets"

  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

  # -- Whether automounting API credentials for a service account is enabled or not.
  # See [https://docs.bridgecrew.io/docs/bc_k8s_35](https://docs.bridgecrew.io/docs/bc_k8s_35)
  automountServiceAccountToken: false
